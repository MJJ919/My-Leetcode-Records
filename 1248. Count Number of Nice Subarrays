'''
'''
https://leetcode.com/problems/count-number-of-nice-subarrays/
Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.
Return the number of nice sub-arrays.

Example 1:
Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
'''
Time:O(n)
Space:O(1)
'''
class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        i = count = res = 0
        for j in range(len(nums)):
            if nums[j]%2 == 1:
                k -= 1
                count = 0
            while k==0:
                k += nums[i]&1
                i += 1
                count += 1
            res += count
        return res
 
'''
Time:O(n)
Space:O(n)
'''
class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        count = 0
        prefix = [0] * (len(nums) + 1)
        odd = 0
        for i in range(len(nums)):
            prefix[odd] += 1
            if nums[i]%2 == 1:
                odd += 1
            if odd >= k:
                count += prefix[odd - k]
        return count
